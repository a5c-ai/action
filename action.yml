name: 'a5c Runner'
description: 'Run AI agents using gitops principles'
author: 'a5c.ai'
branding:
  icon: 'cpu'
  color: 'blue'

inputs:
  # Agent Configuration
  agent_uri:
    description: 'Agent URI - supports file://, agent://, a5c://, or URL formats. If not provided, auto-routing will be used.'
    required: false
  config_file:
    description: 'Path to global configuration file'
    required: false
    default: '.a5c/config.yml'
  config_uri:
    description: 'Remote URI for configuration file (supports http://, https://, file://). Takes precedence over config_file if provided.'
    required: false
  
  # GitHub Authentication
  github_token:
    description: 'GitHub token for API operations'
    required: false
    default: '${{ github.token }}'

outputs:
  # Execution Results
  success:
    description: 'Whether all agent executions were successful'
    value: ${{ steps.a5c-agent.outputs.success }}
  agents_run:
    description: 'Number of agents that were executed'
    value: ${{ steps.a5c-agent.outputs.agents_run }}
  agents_successful:
    description: 'Number of agents that completed successfully'
    value: ${{ steps.a5c-agent.outputs.agents_successful }}
  agents_failed:
    description: 'Number of agents that failed'
    value: ${{ steps.a5c-agent.outputs.agents_failed }}
  agent_results:
    description: 'JSON array of individual agent results'
    value: ${{ steps.a5c-agent.outputs.agent_results }}
  summary:
    description: 'Human-readable summary of the execution'
    value: ${{ steps.a5c-agent.outputs.summary }}
  skipped:
    description: 'Whether execution was skipped (no matching agents)'
    value: ${{ steps.a5c-agent.outputs.skipped }}
  
  # Legacy outputs (for backward compatibility)
  agent_response:
    description: 'The response from the agent (legacy - use agent_results for multi-agent)'
    value: ${{ steps.a5c-agent.outputs.agent_response }}
  execution_time:
    description: 'Time taken for agent execution in seconds (legacy)'
    value: ${{ steps.a5c-agent.outputs.execution_time }}
  
  # Generated Content
  report_path:
    description: 'Path to the generated report'
    value: ${{ steps.a5c-agent.outputs.report_path }}
  report_content:
    description: 'Content of the generated report'
    value: ${{ steps.a5c-agent.outputs.report_content }}
  
  # GitHub Actions
  pull_request_number:
    description: 'Number of the created pull request'
    value: ${{ steps.a5c-agent.outputs.pull_request_number }}
  pull_request_url:
    description: 'URL of the created pull request'
    value: ${{ steps.a5c-agent.outputs.pull_request_url }}
  issue_number:
    description: 'Number of the created issue'
    value: ${{ steps.a5c-agent.outputs.issue_number }}
  issue_url:
    description: 'URL of the created issue'
    value: ${{ steps.a5c-agent.outputs.issue_url }}
  comment_id:
    description: 'ID of the created comment'
    value: ${{ steps.a5c-agent.outputs.comment_id }}
  commit_sha:
    description: 'SHA of the created commit'
    value: ${{ steps.a5c-agent.outputs.commit_sha }}
  
  # Artifacts
  artifact_url:
    description: 'URL of the uploaded artifact'
    value: ${{ steps.a5c-agent.outputs.artifact_url }}
  
  # Metadata
  agent_id:
    description: 'Unique identifier for this agent run'
    value: ${{ steps.a5c-agent.outputs.agent_id }}
  agent_name:
    description: 'Name of the executed agent'
    value: ${{ steps.a5c-agent.outputs.agent_name }}
  agent_category:
    description: 'Category of the executed agent'
    value: ${{ steps.a5c-agent.outputs.agent_category }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install ripgrep
      run: sudo apt-get update -y >/dev/null 2>&1 && sudo apt-get install -y ripgrep
      shell: bash
      working-directory: ${{ github.action_path }}
    
    - name: Install dependencies
      run: npm ci && npm install -g @anthropic-ai/claude-code @openai/codex@v0.10.0
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        NODE_ENV: production
    - name: Authenticate with gh cli
      run: echo ${{ inputs.github_token }} | GH_TOKEN= GITHUB_TOKEN= gh auth login --with-token
      shell: bash
      working-directory: ${{ github.action_path }}
    
    - name: Setup Cloud CLI Tools
      run: |
        echo "Checking for cloud provider credentials..."
        
        # Check for Azure credentials
        if [[ -n "$AZURE_APPLICATION_CLIENT_ID" && -n "$AZURE_APPLICATION_CLIENT_SECRET" && -n "$AZURE_TENANT_ID" ]]; then
          echo "Azure credentials detected, installing Azure CLI..."
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          
          echo "Logging into Azure..."
          az login --service-principal \
            --username "$AZURE_APPLICATION_CLIENT_ID" \
            --password "$AZURE_APPLICATION_CLIENT_SECRET" \
            --tenant "$AZURE_TENANT_ID"
          echo "Azure CLI authentication successful"
        else
          echo "Azure credentials not found (AZURE_APPLICATION_CLIENT_ID, AZURE_APPLICATION_CLIENT_SECRET, AZURE_TENANT_ID)"
        fi
        
        # Check for AWS credentials
        if [[ -n "$AWS_ACCESS_KEY_ID" && -n "$AWS_SECRET_ACCESS_KEY" ]]; then
          echo "AWS credentials detected, installing AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install
          rm -rf awscliv2.zip aws/
          
          echo "Configuring AWS CLI..."
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          if [[ -n "$AWS_DEFAULT_REGION" ]]; then
            aws configure set default.region "$AWS_DEFAULT_REGION"
          fi
          if [[ -n "$AWS_SESSION_TOKEN" ]]; then
            aws configure set aws_session_token "$AWS_SESSION_TOKEN"
          fi
          
          echo "Testing AWS CLI authentication..."
          aws sts get-caller-identity
          echo "AWS CLI authentication successful"
        else
          echo "AWS credentials not found (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)"
        fi
        
        # Check for Google Cloud credentials
        if [[ -n "$GOOGLE_APPLICATION_CREDENTIALS" || -n "$GCP_SA_KEY" ]]; then
          echo "Google Cloud credentials detected, installing Google Cloud CLI..."
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update && sudo apt-get install -y google-cloud-cli
          
          if [[ -n "$GCP_SA_KEY" ]]; then
            echo "Using GCP_SA_KEY for authentication..."
            echo "$GCP_SA_KEY" | base64 -d > /tmp/gcp-key.json
            gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
            rm /tmp/gcp-key.json
          elif [[ -n "$GOOGLE_APPLICATION_CREDENTIALS" ]]; then
            echo "Using GOOGLE_APPLICATION_CREDENTIALS for authentication..."
            gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
          fi
          
          if [[ -n "$GCP_PROJECT_ID" ]]; then
            gcloud config set project "$GCP_PROJECT_ID"
          fi
          
          echo "Testing Google Cloud CLI authentication..."
          gcloud auth list
          echo "Google Cloud CLI authentication successful"
        else
          echo "Google Cloud credentials not found (GOOGLE_APPLICATION_CREDENTIALS or GCP_SA_KEY)"
        fi
        
        echo "Cloud CLI setup completed"
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        AZURE_APPLICATION_CLIENT_ID: ${{ env.AZURE_APPLICATION_CLIENT_ID }}
        AZURE_APPLICATION_CLIENT_SECRET: ${{ env.AZURE_APPLICATION_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
        GCP_SA_KEY: ${{ env.GCP_SA_KEY }}
        GCP_PROJECT_ID: ${{ env.GCP_PROJECT_ID }}
    
    - name: Check GitHub Issues and create PR if needed
      run: |
        # Check if issues are enabled
        ISSUES_ENABLED=$(gh repo view --json hasIssuesEnabled --jq '.hasIssuesEnabled')
        
        if [ "$ISSUES_ENABLED" = "false" ]; then
          echo "Issues are not enabled for this repository"
          
          # Get the default branch
          DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef --jq '.defaultBranchRef.name')
          
          # Create a dummy file to make a PR
          echo "# Enable GitHub Issues Request" > enable-issues-request.md
          echo "" >> enable-issues-request.md
          echo "This repository does not have GitHub Issues enabled." >> enable-issues-request.md
          echo "Please enable Issues in the repository settings to allow issue tracking and better collaboration." >> enable-issues-request.md
          echo "" >> enable-issues-request.md
          echo "To enable issues:" >> enable-issues-request.md
          echo "1. Go to repository Settings" >> enable-issues-request.md
          echo "2. Scroll down to the Features section" >> enable-issues-request.md
          echo "3. Check the 'Issues' checkbox" >> enable-issues-request.md
          echo "" >> enable-issues-request.md
          echo "This file can be deleted once issues are enabled." >> enable-issues-request.md
          
          # Configure git
          git config --global user.name "a5c Runner"
          git config --global user.email "action@a5c.ai"
          
          # Create and switch to a new branch
          BRANCH_NAME="enable-issues-request-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          
          # Add and commit the file
          git add enable-issues-request.md
          git commit -m "Request: Enable GitHub Issues for this repository"
          
          # Push the branch
          git push origin "$BRANCH_NAME"
          
          # Create pull request
          gh pr create \
            --title "Please Enable GitHub Issues" \
            --body "This repository does not have GitHub Issues enabled. Issues are important for tracking bugs, feature requests, and facilitating collaboration. Please enable Issues in the repository settings. Once enabled, this PR can be closed and the branch deleted." \
            --head "$BRANCH_NAME" \
            --base "$DEFAULT_BRANCH"
            
          echo "Created pull request requesting to enable GitHub Issues"
        else
          echo "GitHub Issues are already enabled"
        fi
      shell: bash
      working-directory: ${{ github.workspace }}
      
    - name: Verify CLI Tool Configuration and create issue if needed
      run: |
        echo "Checking for CLI tool configuration..."
        if [[ -n "$A5C_CLI_TOOL" ]]; then
          echo "A5C_CLI_TOOL environment variable found: $A5C_CLI_TOOL"
        else
          echo "❌ A5C_CLI_TOOL environment variable not set - configuration required"
          
          # Check if issues are enabled before creating one
          ISSUES_ENABLED=$(gh repo view --json hasIssuesEnabled --jq '.hasIssuesEnabled')
          
          if [ "$ISSUES_ENABLED" = "true" ]; then
            echo "Creating GitHub issue to request A5C_CLI_TOOL configuration..."
            
            # Check if issue with exact same title already exists and is open
            ISSUE_TITLE="Configure A5C_CLI_TOOL Environment Variable to enable a5c"
            EXISTING_ISSUE=$(gh issue list --state open --json number,title | jq --arg title "$ISSUE_TITLE" '.[] | select(.title == $title) | .number' | head -n1)
            
            if [[ -z "$EXISTING_ISSUE" ]]; then
              # Create the issue with a simple message
              gh issue create \
                --title "$ISSUE_TITLE" \
                --label "enhancement" \
                --body "Please configure the A5C_CLI_TOOL environment variable in repository Settings → Secrets and variables → Actions → Variables for enhanced AI provider support. This ensures consistent CLI command fallback behavior. See https://github.com/a5c-ai/action for documentation. This issue was automatically created by the a5c Runner action."
              
              echo "✅ Created GitHub issue requesting A5C_CLI_TOOL configuration"
            else
              echo "ℹ️ Issue with title '$ISSUE_TITLE' already exists and is open (Issue #$EXISTING_ISSUE)"
            fi
          else
            echo "⚠️ Issues are disabled - cannot create issue for A5C_CLI_TOOL configuration request"
            echo "💡 Consider enabling Issues in repository settings or manually configure A5C_CLI_TOOL"
          fi
          
          echo ""
          echo "🛑 Pipeline stopped: A5C_CLI_TOOL environment variable must be configured"
          echo "📝 Please configure A5C_CLI_TOOL in repository Settings → Secrets and variables → Actions → Variables"
          echo "📖 See https://github.com/a5c-ai/action for documentation and examples"
          exit 1
        fi
      shell: bash
      working-directory: ${{ github.workspace }}
      env:
        A5C_CLI_TOOL: ${{ env.A5C_CLI_TOOL }}
        
    - name: Run a5c Runner
      id: a5c-agent
      run: node index.js ${{ github.workspace }}
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        DISABLE_AUTOUPDATER: 1
        CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC: 1        
        INPUT_AGENT_URI: ${{ inputs.agent_uri }}
        INPUT_CONFIG_FILE: ${{ inputs.config_file }}
        INPUT_CONFIG_URI: ${{ inputs.config_uri }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }} 
        ACTIONS_RUNTIME_TOKEN: ${{ env.ACTIONS_RUNTIME_TOKEN }}
        A5C_CLI_TOOL: ${{ env.A5C_CLI_TOOL }}

